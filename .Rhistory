names(x) = sectorLdf$SectorName
processNamesMatrix = cbind(processes,x)# This is the matrix we will use to produce the 3 outputs
processNamesMatrix$AssignedSectornName = "" # this will contain what we want to assing using the inclusions and exclusions
processNamesMatrix$InclsetUsed = ''  #for testing methodology
processNamesMatrix$ExclsetUsed = '' #for testing methodologu
#Loop thru the matrix and make the assignments.
#loop thru each technology name
N = dim(processNamesMatrix)[1]
D = dim(sectorLdf)[1] # list of all SectorNames in this SectorLevel
for(i in seq(1,N)){
#is this technology in the inclusion?
tname = processNamesMatrix[i,"Technology"] # the technology name we want to map\
assignedSecDesc = "" #default name. In some cases there are no subsector assignments.
#loop thru each row of sectorLdf
for (j in seq(1,D)){
#if yes, then assign SectorDesc. value if it isnt in exclude list
#is tname in the exclude set
nameofSect = sectorLdf[j,2]
excludethese = sectorLdf[j,4]
includethese = sectorLdf[j,3]
if(grepl(excludethese,tname)){
#tname is within exclude so move onto the next j
processNamesMatrix[i,'ExclsetUsed'] = excludethese
}else{
# tname is not within exclude
#is tname within the include:
if(grepl(includethese,tname)){
processNamesMatrix[i,"InclsetUsed"] = includethese
assignedSecDesc = nameofSect
processNamesMatrix[i,nameofSect] = as.character(tname) #for duplication check and for other matrix output
#break #stop the search. it is within this inclusive set. if commented out, then check all possible matches - used for duplicate checking.
}
}
}
processNamesMatrix[i,'AssignedSectornName'] = assignedSecDesc
}
#make duplicates matrix for this sectorL:
dupMatrix = processNamesMatrix
dupMatrix = dupMatrix[,names(dupMatrix)%in% sectorLdf$SectorName]
#get all rows which have more than one entry along the columns
for(i in seq(1,dim(dupMatrix)[1])){
dupMatrix[i,'Number of Duplicates'] = sum(!(dupMatrix[i,(names(dupMatrix) != 'Number of Duplicates')]== ' '))
}
dupMatrix = dupMatrix[!(dupMatrix$Count %in% c(1,0)),]
#make trees matrix for this SectorL
treesMatrix = processNamesMatrix[,sectorLdf$SectorName]
#shift all entries to top of dataframe
tmp = treesMatrix
for (w in seq(1,D)){
tmp[,w] = sort(tmp[,w],decreasing = T)
}
treesMatrix = tmp
#make processnamesmatrix.long = long/melted format of processnamesmatrix
processNamesMatrix[,sectorL] = processNamesMatrix$AssignedSectornName
processNamesMatrix.long = melt(processNamesMatrix[,c('Technology','Tech Description',sectorL)],id.vars = c('Technology','Tech Description',sectorL))
#append processnamesmatrix.long to masterlist
processNamesMatrix.long.Master = merge(processNamesMatrix.long.Master,processNamesMatrix.long)
#add 'other' to any entries that dont have description for subsubsector
if(sectorL == 'Subsubsector')
{
processNamesMatrix.long.Master[processNamesMatrix.long.Master[,sectorL] == "",sectorL] = 'Other'
}
#write output
#write the duplicates sheet
write.csv(dupMatrix,paste(paste(writepath,paste('DupesMatrix ',sectorL,sep = '')),'.csv',sep = ''))
#write trees matrix
write.csv(treesMatrix,paste(paste(writepath,paste('TreesMatrix ',sectorL,sep = '')),'.csv',sep = ''))
}
#write to the csv that will go to the MCSim
tmp = processNamesMatrix.long.Master
names(tmp)[names(tmp)=='Technology'] = 'Process' # this is the name used in the other R scripts
write.csv(tmp,paste(writepath,'mapPRC.csv',sep = '/'),row.names = F)
#read in excel sets
library(XLConnect)
library(gdxrrw)
library(reshape2)
igdx("C:/GAMS/win64/24.7")
#the GDX files location
gdxLocation = 'C:/AnswerTIMESv6/Gams_WrkTI/gamssave/'
saverdspath = 'C:/Users/01425453/Desktop/Satimviz AnswerOutput/RDSfiles/'
print('getting the latest GDX from ANSWER...')
fileDetails = file.info(list.files(gdxLocation,pattern= '*.gdx',full.names = T))
fileDetails = fileDetails[with(fileDetails,order(as.POSIXct(mtime),decreasing = T)),]
gdxfile = rownames(fileDetails)[1]
gdxPath = gdxfile
gdxname = gsub('.*/','',gdxfile)#extract the name of the gdx file without the extension
gdxname = gsub('.gdx','',gdxname)
print(gdxname)
processes = rgdx.set(gdxfile,'PRC',te = TRUE)
#commodities = rgdx.set(gdxPath,'COM',te = T)
names(processes) = c('Technology','Tech Description')
#names(commodities) = c('Commodity','Com Description')
filepath = "C:/Users/01425453/Documents/R/MappingSets/SATIMsets.xlsm"
writepath = "C:/Users/01425453/Documents/R/MappingSets/"
#get the user defined mappings and create the inclusive and exclusive lists from them:
userMappingSets = readWorksheetFromFile(filepath, sheet ='UserPRCsets',header = T)
#cut out all the stuff we dont need.
userMappingSets = userMappingSets[,names(userMappingSets)%in% c('SectorLevel','SectorName','Include','Exclude')]
userMappingSets[is.na(userMappingSets)] = " " #replace NA with an empty character for searching later.
#loop over each unique sectorLevel :
uniqueSectorLevels = unique(userMappingSets$SectorLevel)
processNamesMatrix.long.Master = processes
for (k in seq(1,length(uniqueSectorLevels)))
{
sectorL = uniqueSectorLevels[k]#the sectorlevel - 'sector' or 'subsector' etc.
sectorLdf = userMappingSets[userMappingSets$SectorLevel == sectorL,]#get the dataframe for just this sector level
print(sectorL)
#make processnamesmatrix
x = matrix(' ',nrow = dim(processes)[1],ncol = dim(sectorLdf)[1])
x = as.data.frame(x,stringsAsFactors = F)
names(x) = sectorLdf$SectorName
processNamesMatrix = cbind(processes,x)# This is the matrix we will use to produce the 3 outputs
processNamesMatrix$AssignedSectornName = "" # this will contain what we want to assing using the inclusions and exclusions
processNamesMatrix$InclsetUsed = ''  #for testing methodology
processNamesMatrix$ExclsetUsed = '' #for testing methodologu
#Loop thru the matrix and make the assignments.
#loop thru each technology name
N = dim(processNamesMatrix)[1]
D = dim(sectorLdf)[1] # list of all SectorNames in this SectorLevel
for(i in seq(1,N)){
#is this technology in the inclusion?
tname = processNamesMatrix[i,"Technology"] # the technology name we want to map\
assignedSecDesc = "" #default name. In some cases there are no subsector assignments.
#loop thru each row of sectorLdf
for (j in seq(1,D)){
#if yes, then assign SectorDesc. value if it isnt in exclude list
#is tname in the exclude set
nameofSect = sectorLdf[j,2]
excludethese = sectorLdf[j,4]
includethese = sectorLdf[j,3]
if(grepl(excludethese,tname)){
#tname is within exclude so move onto the next j
processNamesMatrix[i,'ExclsetUsed'] = excludethese
}else{
# tname is not within exclude
#is tname within the include:
if(grepl(includethese,tname)){
processNamesMatrix[i,"InclsetUsed"] = includethese
assignedSecDesc = nameofSect
processNamesMatrix[i,nameofSect] = as.character(tname) #for duplication check and for other matrix output
#break #stop the search. it is within this inclusive set. if commented out, then check all possible matches - used for duplicate checking.
}
}
}
processNamesMatrix[i,'AssignedSectornName'] = assignedSecDesc
}
#make duplicates matrix for this sectorL:
dupMatrix = processNamesMatrix
dupMatrix = dupMatrix[,names(dupMatrix)%in% sectorLdf$SectorName]
#get all rows which have more than one entry along the columns
for(i in seq(1,dim(dupMatrix)[1])){
dupMatrix[i,'Number of Duplicates'] = sum(!(dupMatrix[i,(names(dupMatrix) != 'Number of Duplicates')]== ' '))
}
dupMatrix = dupMatrix[!(dupMatrix$Count %in% c(1,0)),]
#make trees matrix for this SectorL
treesMatrix = processNamesMatrix[,sectorLdf$SectorName]
#shift all entries to top of dataframe
tmp = treesMatrix
for (w in seq(1,D)){
tmp[,w] = sort(tmp[,w],decreasing = T)
}
treesMatrix = tmp
#make processnamesmatrix.long = long/melted format of processnamesmatrix
processNamesMatrix[,sectorL] = processNamesMatrix$AssignedSectornName
processNamesMatrix.long = melt(processNamesMatrix[,c('Technology','Tech Description',sectorL)],id.vars = c('Technology','Tech Description',sectorL))
#append processnamesmatrix.long to masterlist
processNamesMatrix.long.Master = merge(processNamesMatrix.long.Master,processNamesMatrix.long)
#add 'other' to any entries that dont have description for subsubsector
if(sectorL == 'Subsubsector')
{
processNamesMatrix.long.Master[processNamesMatrix.long.Master[,sectorL] == "",sectorL] = 'Other'
}
#write output
#write the duplicates sheet
write.csv(dupMatrix,paste(paste(writepath,paste('DupesMatrix ',sectorL,sep = '')),'.csv',sep = ''))
#write trees matrix
write.csv(treesMatrix,paste(paste(writepath,paste('TreesMatrix ',sectorL,sep = '')),'.csv',sep = ''))
}
#write to the csv that will go to the MCSim
tmp = processNamesMatrix.long.Master
names(tmp)[names(tmp)=='Technology'] = 'Process' # this is the name used in the other R scripts
write.csv(tmp,paste(writepath,'mapPRC.csv',sep = '/'),row.names = F)
#read in excel sets
library(XLConnect)
library(gdxrrw)
library(reshape2)
igdx("C:/GAMS/win64/24.7")
#the GDX files location
gdxLocation = 'C:/AnswerTIMESv6/Gams_WrkTI/gamssave/'
saverdspath = 'C:/Users/01425453/Desktop/Satimviz AnswerOutput/RDSfiles/'
print('getting the latest GDX from ANSWER...')
fileDetails = file.info(list.files(gdxLocation,pattern= '*.gdx',full.names = T))
fileDetails = fileDetails[with(fileDetails,order(as.POSIXct(mtime),decreasing = T)),]
gdxfile = rownames(fileDetails)[1]
gdxPath = gdxfile
gdxname = gsub('.*/','',gdxfile)#extract the name of the gdx file without the extension
gdxname = gsub('.gdx','',gdxname)
print(gdxname)
processes = rgdx.set(gdxfile,'PRC',te = TRUE)
#commodities = rgdx.set(gdxPath,'COM',te = T)
names(processes) = c('Technology','Tech Description')
#names(commodities) = c('Commodity','Com Description')
filepath = "C:/Users/01425453/Documents/R/MappingSets/SATIMsets.xlsm"
writepath = "C:/Users/01425453/Documents/R/MappingSets/"
#get the user defined mappings and create the inclusive and exclusive lists from them:
userMappingSets = readWorksheetFromFile(filepath, sheet ='UserPRCsets',header = T)
#cut out all the stuff we dont need.
userMappingSets = userMappingSets[,names(userMappingSets)%in% c('SectorLevel','SectorName','Include','Exclude')]
userMappingSets[is.na(userMappingSets)] = " " #replace NA with an empty character for searching later.
#loop over each unique sectorLevel :
uniqueSectorLevels = unique(userMappingSets$SectorLevel)
processNamesMatrix.long.Master = processes
for (k in seq(1,length(uniqueSectorLevels)))
{
sectorL = uniqueSectorLevels[k]#the sectorlevel - 'sector' or 'subsector' etc.
sectorLdf = userMappingSets[userMappingSets$SectorLevel == sectorL,]#get the dataframe for just this sector level
print(sectorL)
#make processnamesmatrix
x = matrix(' ',nrow = dim(processes)[1],ncol = dim(sectorLdf)[1])
x = as.data.frame(x,stringsAsFactors = F)
names(x) = sectorLdf$SectorName
processNamesMatrix = cbind(processes,x)# This is the matrix we will use to produce the 3 outputs
processNamesMatrix$AssignedSectornName = "" # this will contain what we want to assing using the inclusions and exclusions
processNamesMatrix$InclsetUsed = ''  #for testing methodology
processNamesMatrix$ExclsetUsed = '' #for testing methodologu
#Loop thru the matrix and make the assignments.
#loop thru each technology name
N = dim(processNamesMatrix)[1]
D = dim(sectorLdf)[1] # list of all SectorNames in this SectorLevel
for(i in seq(1,N)){
#is this technology in the inclusion?
tname = processNamesMatrix[i,"Technology"] # the technology name we want to map\
assignedSecDesc = "" #default name. In some cases there are no subsector assignments.
#loop thru each row of sectorLdf
for (j in seq(1,D)){
#if yes, then assign SectorDesc. value if it isnt in exclude list
#is tname in the exclude set
nameofSect = sectorLdf[j,2]
excludethese = sectorLdf[j,4]
includethese = sectorLdf[j,3]
if(grepl(excludethese,tname)){
#tname is within exclude so move onto the next j
processNamesMatrix[i,'ExclsetUsed'] = excludethese
}else{
# tname is not within exclude
#is tname within the include:
if(grepl(includethese,tname)){
processNamesMatrix[i,"InclsetUsed"] = includethese
assignedSecDesc = nameofSect
processNamesMatrix[i,nameofSect] = as.character(tname) #for duplication check and for other matrix output
#break #stop the search. it is within this inclusive set. if commented out, then check all possible matches - used for duplicate checking.
}
}
}
processNamesMatrix[i,'AssignedSectornName'] = assignedSecDesc
}
#make duplicates matrix for this sectorL:
dupMatrix = processNamesMatrix
dupMatrix = dupMatrix[,names(dupMatrix)%in% sectorLdf$SectorName]
#get all rows which have more than one entry along the columns
for(i in seq(1,dim(dupMatrix)[1])){
dupMatrix[i,'Number of Duplicates'] = sum(!(dupMatrix[i,(names(dupMatrix) != 'Number of Duplicates')]== ' '))
}
dupMatrix = dupMatrix[!(dupMatrix$Count %in% c(1,0)),]
#make trees matrix for this SectorL
treesMatrix = processNamesMatrix[,sectorLdf$SectorName]
#shift all entries to top of dataframe
tmp = treesMatrix
for (w in seq(1,D)){
tmp[,w] = sort(tmp[,w],decreasing = T)
}
treesMatrix = tmp
#make processnamesmatrix.long = long/melted format of processnamesmatrix
processNamesMatrix[,sectorL] = processNamesMatrix$AssignedSectornName
processNamesMatrix.long = melt(processNamesMatrix[,c('Technology','Tech Description',sectorL)],id.vars = c('Technology','Tech Description',sectorL))
#append processnamesmatrix.long to masterlist
processNamesMatrix.long.Master = merge(processNamesMatrix.long.Master,processNamesMatrix.long)
#add 'other' to any entries that dont have description for subsubsector
if(sectorL == 'Subsubsector')
{
processNamesMatrix.long.Master[processNamesMatrix.long.Master[,sectorL] == "",sectorL] = 'Other'
}
#write output
#write the duplicates sheet
write.csv(dupMatrix,paste(paste(writepath,paste('DupesMatrix ',sectorL,sep = '')),'.csv',sep = ''))
#write trees matrix
write.csv(treesMatrix,paste(paste(writepath,paste('TreesMatrix ',sectorL,sep = '')),'.csv',sep = ''))
}
#write to the csv that will go to the MCSim
tmp = processNamesMatrix.long.Master
names(tmp)[names(tmp)=='Technology'] = 'Process' # this is the name used in the other R scripts
write.csv(tmp,paste(writepath,'mapPRC.csv',sep = '/'),row.names = F)
#read in excel sets
library(XLConnect)
library(gdxrrw)
library(reshape2)
igdx("C:/GAMS/win64/24.7")
#the GDX files location
gdxLocation = 'C:/AnswerTIMESv6/Gams_WrkTI/gamssave/'
saverdspath = 'C:/Users/01425453/Desktop/Satimviz AnswerOutput/RDSfiles/'
print('getting the latest GDX from ANSWER...')
fileDetails = file.info(list.files(gdxLocation,pattern= '*.gdx',full.names = T))
fileDetails = fileDetails[with(fileDetails,order(as.POSIXct(mtime),decreasing = T)),]
gdxfile = rownames(fileDetails)[1]
gdxPath = gdxfile
gdxname = gsub('.*/','',gdxfile)#extract the name of the gdx file without the extension
gdxname = gsub('.gdx','',gdxname)
print(gdxname)
processes = rgdx.set(gdxfile,'PRC',te = TRUE)
#commodities = rgdx.set(gdxPath,'COM',te = T)
names(processes) = c('Technology','Tech Description')
#names(commodities) = c('Commodity','Com Description')
filepath = "C:/Users/01425453/Documents/R/MappingSets/SATIMsets.xlsm"
writepath = "C:/Users/01425453/Documents/R/MappingSets/"
#get the user defined mappings and create the inclusive and exclusive lists from them:
userMappingSets = readWorksheetFromFile(filepath, sheet ='UserPRCsets',header = T)
#cut out all the stuff we dont need.
userMappingSets = userMappingSets[,names(userMappingSets)%in% c('SectorLevel','SectorName','Include','Exclude')]
userMappingSets[is.na(userMappingSets)] = " " #replace NA with an empty character for searching later.
#loop over each unique sectorLevel :
uniqueSectorLevels = unique(userMappingSets$SectorLevel)
processNamesMatrix.long.Master = processes
for (k in seq(1,length(uniqueSectorLevels)))
{
sectorL = uniqueSectorLevels[k]#the sectorlevel - 'sector' or 'subsector' etc.
sectorLdf = userMappingSets[userMappingSets$SectorLevel == sectorL,]#get the dataframe for just this sector level
print(sectorL)
#make processnamesmatrix
x = matrix(' ',nrow = dim(processes)[1],ncol = dim(sectorLdf)[1])
x = as.data.frame(x,stringsAsFactors = F)
names(x) = sectorLdf$SectorName
processNamesMatrix = cbind(processes,x)# This is the matrix we will use to produce the 3 outputs
processNamesMatrix$AssignedSectornName = "" # this will contain what we want to assing using the inclusions and exclusions
processNamesMatrix$InclsetUsed = ''  #for testing methodology
processNamesMatrix$ExclsetUsed = '' #for testing methodologu
#Loop thru the matrix and make the assignments.
#loop thru each technology name
N = dim(processNamesMatrix)[1]
D = dim(sectorLdf)[1] # list of all SectorNames in this SectorLevel
for(i in seq(1,N)){
#is this technology in the inclusion?
tname = processNamesMatrix[i,"Technology"] # the technology name we want to map\
assignedSecDesc = "" #default name. In some cases there are no subsector assignments.
#loop thru each row of sectorLdf
for (j in seq(1,D)){
#if yes, then assign SectorDesc. value if it isnt in exclude list
#is tname in the exclude set
nameofSect = sectorLdf[j,2]
excludethese = sectorLdf[j,4]
includethese = sectorLdf[j,3]
if(grepl(excludethese,tname)){
#tname is within exclude so move onto the next j
processNamesMatrix[i,'ExclsetUsed'] = excludethese
}else{
# tname is not within exclude
#is tname within the include:
if(grepl(includethese,tname)){
processNamesMatrix[i,"InclsetUsed"] = includethese
assignedSecDesc = nameofSect
processNamesMatrix[i,nameofSect] = as.character(tname) #for duplication check and for other matrix output
#break #stop the search. it is within this inclusive set. if commented out, then check all possible matches - used for duplicate checking.
}
}
}
processNamesMatrix[i,'AssignedSectornName'] = assignedSecDesc
}
#make duplicates matrix for this sectorL:
dupMatrix = processNamesMatrix
dupMatrix = dupMatrix[,names(dupMatrix)%in% sectorLdf$SectorName]
#get all rows which have more than one entry along the columns
for(i in seq(1,dim(dupMatrix)[1])){
dupMatrix[i,'Number of Duplicates'] = sum(!(dupMatrix[i,(names(dupMatrix) != 'Number of Duplicates')]== ' '))
}
dupMatrix = dupMatrix[!(dupMatrix$Count %in% c(1,0)),]
#make trees matrix for this SectorL
treesMatrix = processNamesMatrix[,sectorLdf$SectorName]
#shift all entries to top of dataframe
tmp = treesMatrix
for (w in seq(1,D)){
tmp[,w] = sort(tmp[,w],decreasing = T)
}
treesMatrix = tmp
#make processnamesmatrix.long = long/melted format of processnamesmatrix
processNamesMatrix[,sectorL] = processNamesMatrix$AssignedSectornName
processNamesMatrix.long = melt(processNamesMatrix[,c('Technology','Tech Description',sectorL)],id.vars = c('Technology','Tech Description',sectorL))
#append processnamesmatrix.long to masterlist
processNamesMatrix.long.Master = merge(processNamesMatrix.long.Master,processNamesMatrix.long)
#add 'other' to any entries that dont have description for subsubsector
if(sectorL == 'Subsubsector')
{
processNamesMatrix.long.Master[processNamesMatrix.long.Master[,sectorL] == "",sectorL] = 'Other'
}
#write output
#write the duplicates sheet
write.csv(dupMatrix,paste(paste(writepath,paste('DupesMatrix ',sectorL,sep = '')),'.csv',sep = ''))
#write trees matrix
write.csv(treesMatrix,paste(paste(writepath,paste('TreesMatrix ',sectorL,sep = '')),'.csv',sep = ''))
}
#write to the csv that will go to the MCSim
tmp = processNamesMatrix.long.Master
names(tmp)[names(tmp)=='Technology'] = 'Process' # this is the name used in the other R scripts
write.csv(tmp,paste(writepath,'mapPRC.csv',sep = '/'),row.names = F)
#read in excel sets
library(XLConnect)
library(gdxrrw)
library(reshape2)
igdx("C:/GAMS/win64/24.7")
#the GDX files location
gdxLocation = 'C:/AnswerTIMESv6/Gams_WrkTI/gamssave/'
saverdspath = 'C:/Users/01425453/Desktop/Satimviz AnswerOutput/RDSfiles/'
print('getting the latest GDX from ANSWER...')
fileDetails = file.info(list.files(gdxLocation,pattern= '*.gdx',full.names = T))
fileDetails = fileDetails[with(fileDetails,order(as.POSIXct(mtime),decreasing = T)),]
gdxfile = rownames(fileDetails)[1]
gdxPath = gdxfile
gdxname = gsub('.*/','',gdxfile)#extract the name of the gdx file without the extension
gdxname = gsub('.gdx','',gdxname)
print(gdxname)
processes = rgdx.set(gdxfile,'PRC',te = TRUE)
#commodities = rgdx.set(gdxPath,'COM',te = T)
names(processes) = c('Technology','Tech Description')
#names(commodities) = c('Commodity','Com Description')
filepath = "C:/Users/01425453/Documents/R/MappingSets/SATIMsets.xlsm"
writepath = "C:/Users/01425453/Documents/R/MappingSets/"
#get the user defined mappings and create the inclusive and exclusive lists from them:
userMappingSets = readWorksheetFromFile(filepath, sheet ='UserPRCsets',header = T)
#cut out all the stuff we dont need.
userMappingSets = userMappingSets[,names(userMappingSets)%in% c('SectorLevel','SectorName','Include','Exclude')]
userMappingSets[is.na(userMappingSets)] = " " #replace NA with an empty character for searching later.
#loop over each unique sectorLevel :
uniqueSectorLevels = unique(userMappingSets$SectorLevel)
processNamesMatrix.long.Master = processes
for (k in seq(1,length(uniqueSectorLevels)))
{
sectorL = uniqueSectorLevels[k]#the sectorlevel - 'sector' or 'subsector' etc.
sectorLdf = userMappingSets[userMappingSets$SectorLevel == sectorL,]#get the dataframe for just this sector level
print(sectorL)
#make processnamesmatrix
x = matrix(' ',nrow = dim(processes)[1],ncol = dim(sectorLdf)[1])
x = as.data.frame(x,stringsAsFactors = F)
names(x) = sectorLdf$SectorName
processNamesMatrix = cbind(processes,x)# This is the matrix we will use to produce the 3 outputs
processNamesMatrix$AssignedSectornName = "" # this will contain what we want to assing using the inclusions and exclusions
processNamesMatrix$InclsetUsed = ''  #for testing methodology
processNamesMatrix$ExclsetUsed = '' #for testing methodologu
#Loop thru the matrix and make the assignments.
#loop thru each technology name
N = dim(processNamesMatrix)[1]
D = dim(sectorLdf)[1] # list of all SectorNames in this SectorLevel
for(i in seq(1,N)){
#is this technology in the inclusion?
tname = processNamesMatrix[i,"Technology"] # the technology name we want to map\
assignedSecDesc = "" #default name. In some cases there are no subsector assignments.
#loop thru each row of sectorLdf
for (j in seq(1,D)){
#if yes, then assign SectorDesc. value if it isnt in exclude list
#is tname in the exclude set
nameofSect = sectorLdf[j,2]
excludethese = sectorLdf[j,4]
includethese = sectorLdf[j,3]
if(grepl(excludethese,tname)){
#tname is within exclude so move onto the next j
processNamesMatrix[i,'ExclsetUsed'] = excludethese
}else{
# tname is not within exclude
#is tname within the include:
if(grepl(includethese,tname)){
processNamesMatrix[i,"InclsetUsed"] = includethese
assignedSecDesc = nameofSect
processNamesMatrix[i,nameofSect] = as.character(tname) #for duplication check and for other matrix output
#break #stop the search. it is within this inclusive set. if commented out, then check all possible matches - used for duplicate checking.
}
}
}
processNamesMatrix[i,'AssignedSectornName'] = assignedSecDesc
}
#make duplicates matrix for this sectorL:
dupMatrix = processNamesMatrix
dupMatrix = dupMatrix[,names(dupMatrix)%in% sectorLdf$SectorName]
#get all rows which have more than one entry along the columns
for(i in seq(1,dim(dupMatrix)[1])){
dupMatrix[i,'Number of Duplicates'] = sum(!(dupMatrix[i,(names(dupMatrix) != 'Number of Duplicates')]== ' '))
}
dupMatrix = dupMatrix[!(dupMatrix$Count %in% c(1,0)),]
#make trees matrix for this SectorL
treesMatrix = processNamesMatrix[,sectorLdf$SectorName]
#shift all entries to top of dataframe
tmp = treesMatrix
for (w in seq(1,D)){
tmp[,w] = sort(tmp[,w],decreasing = T)
}
treesMatrix = tmp
#make processnamesmatrix.long = long/melted format of processnamesmatrix
processNamesMatrix[,sectorL] = processNamesMatrix$AssignedSectornName
processNamesMatrix.long = melt(processNamesMatrix[,c('Technology','Tech Description',sectorL)],id.vars = c('Technology','Tech Description',sectorL))
#append processnamesmatrix.long to masterlist
processNamesMatrix.long.Master = merge(processNamesMatrix.long.Master,processNamesMatrix.long)
#add 'other' to any entries that dont have description for subsubsector
if(sectorL == 'Subsubsector')
{
processNamesMatrix.long.Master[processNamesMatrix.long.Master[,sectorL] == "",sectorL] = 'Other'
}
#write output
#write the duplicates sheet
write.csv(dupMatrix,paste(paste(writepath,paste('DupesMatrix ',sectorL,sep = '')),'.csv',sep = ''))
#write trees matrix
write.csv(treesMatrix,paste(paste(writepath,paste('TreesMatrix ',sectorL,sep = '')),'.csv',sep = ''))
}
#write to the csv that will go to the MCSim
tmp = processNamesMatrix.long.Master
names(tmp)[names(tmp)=='Technology'] = 'Process' # this is the name used in the other R scripts
write.csv(tmp,paste(writepath,'mapPRC.csv',sep = '/'),row.names = F)
